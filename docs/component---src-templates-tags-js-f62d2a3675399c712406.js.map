{"version":3,"file":"component---src-templates-tags-js-f62d2a3675399c712406.js","mappings":"0JA2DA,UArDa,SAAC,GAA2B,IAAzBA,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KACjBC,EAAQF,EAARE,IACR,EAA8BD,EAAKE,kBAA3BC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,WACTC,EAAeD,EAAN,SACI,IAAfA,EAAmB,GAAK,KADb,iBAEEH,EAFF,IAIf,OACI,2BACI,0BAAKI,GACL,0BACKF,EAAMG,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACFC,EAASD,EAAKE,OAAdD,KACAE,EAAUH,EAAKI,YAAfD,MACR,OACI,sBAAIE,IAAKJ,GACL,gBAAC,KAAD,CAAMK,GAAIL,GAAOE,GAG5B,KAML,gBAAC,KAAD,CAAMG,GAAG,SAAT,YAGX,C","sources":["webpack://rtupintheair-blog/./src/templates/tags.js"],"sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\n\n// Components\nimport { Link, graphql } from \"gatsby\"\n\nconst Tags = ({ pageContext, data }) => {\n    const { tag } = pageContext\n    const { edges, totalCount } = data.allMarkdownRemark\n    const tagHeader = `${totalCount} post${\n        totalCount === 1 ? \"\" : \"s\"\n    } tagged with \"${tag}\"`\n\n    return (\n        <div>\n            <h1>{tagHeader}</h1>\n            <ul>\n                {edges.map(({ node }) => {\n                    const { slug } = node.fields\n                    const { title } = node.frontmatter\n                    return (\n                        <li key={slug}>\n                            <Link to={slug}>{title}</Link>\n                        </li>\n                    )\n                })}\n            </ul>\n            {/*\n              This links to a page that does not yet exist.\n              You'll come back to it!\n            */}\n            <Link to=\"/tags\">All tags</Link>\n        </div>\n    )\n}\n\nTags.propTypes = {\n    pageContext: PropTypes.shape({\n        tag: PropTypes.string.isRequired,\n    }),\n    data: PropTypes.shape({\n        allMarkdownRemark: PropTypes.shape({\n            totalCount: PropTypes.number.isRequired,\n            edges: PropTypes.arrayOf(\n                PropTypes.shape({\n                    node: PropTypes.shape({\n                        frontmatter: PropTypes.shape({\n                            title: PropTypes.string.isRequired,\n                        }),\n                        fields: PropTypes.shape({\n                            slug: PropTypes.string.isRequired,\n                        }),\n                    }),\n                }).isRequired\n            ),\n        }),\n    }),\n}\n\nexport default Tags\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n          }\n        }\n      }\n    }\n  }\n`"],"names":["pageContext","data","tag","allMarkdownRemark","edges","totalCount","tagHeader","map","node","slug","fields","title","frontmatter","key","to"],"sourceRoot":""}